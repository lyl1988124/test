/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lyl.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-11-20")
public class MyParam implements org.apache.thrift.TBase<MyParam, MyParam._Fields>, java.io.Serializable, Cloneable, Comparable<MyParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MyParam");

  private static final org.apache.thrift.protocol.TField PARA_FIELD_DESC = new org.apache.thrift.protocol.TField("para", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARA2_FIELD_DESC = new org.apache.thrift.protocol.TField("para2", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField PARA3_FIELD_DESC = new org.apache.thrift.protocol.TField("para3", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField PARA4_FIELD_DESC = new org.apache.thrift.protocol.TField("para4", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField PARA5_FIELD_DESC = new org.apache.thrift.protocol.TField("para5", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PARA6_FIELD_DESC = new org.apache.thrift.protocol.TField("para6", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PARA7_FIELD_DESC = new org.apache.thrift.protocol.TField("para7", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PARA8_FIELD_DESC = new org.apache.thrift.protocol.TField("para8", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MyParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MyParamTupleSchemeFactory());
  }

  public String para; // required
  public boolean para2; // required
  public byte para3; // required
  public short para4; // required
  public int para5; // required
  public long para6; // required
  public double para7; // required
  public String para8; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARA((short)1, "para"),
    PARA2((short)2, "para2"),
    PARA3((short)3, "para3"),
    PARA4((short)4, "para4"),
    PARA5((short)5, "para5"),
    PARA6((short)6, "para6"),
    PARA7((short)7, "para7"),
    PARA8((short)8, "para8");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARA
          return PARA;
        case 2: // PARA2
          return PARA2;
        case 3: // PARA3
          return PARA3;
        case 4: // PARA4
          return PARA4;
        case 5: // PARA5
          return PARA5;
        case 6: // PARA6
          return PARA6;
        case 7: // PARA7
          return PARA7;
        case 8: // PARA8
          return PARA8;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARA2_ISSET_ID = 0;
  private static final int __PARA3_ISSET_ID = 1;
  private static final int __PARA4_ISSET_ID = 2;
  private static final int __PARA5_ISSET_ID = 3;
  private static final int __PARA6_ISSET_ID = 4;
  private static final int __PARA7_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARA, new org.apache.thrift.meta_data.FieldMetaData("para", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARA2, new org.apache.thrift.meta_data.FieldMetaData("para2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARA3, new org.apache.thrift.meta_data.FieldMetaData("para3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.PARA4, new org.apache.thrift.meta_data.FieldMetaData("para4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PARA5, new org.apache.thrift.meta_data.FieldMetaData("para5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARA6, new org.apache.thrift.meta_data.FieldMetaData("para6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARA7, new org.apache.thrift.meta_data.FieldMetaData("para7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PARA8, new org.apache.thrift.meta_data.FieldMetaData("para8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MyParam.class, metaDataMap);
  }

  public MyParam() {
  }

  public MyParam(
    String para,
    boolean para2,
    byte para3,
    short para4,
    int para5,
    long para6,
    double para7,
    String para8)
  {
    this();
    this.para = para;
    this.para2 = para2;
    setPara2IsSet(true);
    this.para3 = para3;
    setPara3IsSet(true);
    this.para4 = para4;
    setPara4IsSet(true);
    this.para5 = para5;
    setPara5IsSet(true);
    this.para6 = para6;
    setPara6IsSet(true);
    this.para7 = para7;
    setPara7IsSet(true);
    this.para8 = para8;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyParam(MyParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPara()) {
      this.para = other.para;
    }
    this.para2 = other.para2;
    this.para3 = other.para3;
    this.para4 = other.para4;
    this.para5 = other.para5;
    this.para6 = other.para6;
    this.para7 = other.para7;
    if (other.isSetPara8()) {
      this.para8 = other.para8;
    }
  }

  public MyParam deepCopy() {
    return new MyParam(this);
  }

  @Override
  public void clear() {
    this.para = null;
    setPara2IsSet(false);
    this.para2 = false;
    setPara3IsSet(false);
    this.para3 = 0;
    setPara4IsSet(false);
    this.para4 = 0;
    setPara5IsSet(false);
    this.para5 = 0;
    setPara6IsSet(false);
    this.para6 = 0;
    setPara7IsSet(false);
    this.para7 = 0.0;
    this.para8 = null;
  }

  public String getPara() {
    return this.para;
  }

  public MyParam setPara(String para) {
    this.para = para;
    return this;
  }

  public void unsetPara() {
    this.para = null;
  }

  /** Returns true if field para is set (has been assigned a value) and false otherwise */
  public boolean isSetPara() {
    return this.para != null;
  }

  public void setParaIsSet(boolean value) {
    if (!value) {
      this.para = null;
    }
  }

  public boolean isPara2() {
    return this.para2;
  }

  public MyParam setPara2(boolean para2) {
    this.para2 = para2;
    setPara2IsSet(true);
    return this;
  }

  public void unsetPara2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA2_ISSET_ID);
  }

  /** Returns true if field para2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara2() {
    return EncodingUtils.testBit(__isset_bitfield, __PARA2_ISSET_ID);
  }

  public void setPara2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA2_ISSET_ID, value);
  }

  public byte getPara3() {
    return this.para3;
  }

  public MyParam setPara3(byte para3) {
    this.para3 = para3;
    setPara3IsSet(true);
    return this;
  }

  public void unsetPara3() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA3_ISSET_ID);
  }

  /** Returns true if field para3 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara3() {
    return EncodingUtils.testBit(__isset_bitfield, __PARA3_ISSET_ID);
  }

  public void setPara3IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA3_ISSET_ID, value);
  }

  public short getPara4() {
    return this.para4;
  }

  public MyParam setPara4(short para4) {
    this.para4 = para4;
    setPara4IsSet(true);
    return this;
  }

  public void unsetPara4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA4_ISSET_ID);
  }

  /** Returns true if field para4 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara4() {
    return EncodingUtils.testBit(__isset_bitfield, __PARA4_ISSET_ID);
  }

  public void setPara4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA4_ISSET_ID, value);
  }

  public int getPara5() {
    return this.para5;
  }

  public MyParam setPara5(int para5) {
    this.para5 = para5;
    setPara5IsSet(true);
    return this;
  }

  public void unsetPara5() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA5_ISSET_ID);
  }

  /** Returns true if field para5 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara5() {
    return EncodingUtils.testBit(__isset_bitfield, __PARA5_ISSET_ID);
  }

  public void setPara5IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA5_ISSET_ID, value);
  }

  public long getPara6() {
    return this.para6;
  }

  public MyParam setPara6(long para6) {
    this.para6 = para6;
    setPara6IsSet(true);
    return this;
  }

  public void unsetPara6() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA6_ISSET_ID);
  }

  /** Returns true if field para6 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara6() {
    return EncodingUtils.testBit(__isset_bitfield, __PARA6_ISSET_ID);
  }

  public void setPara6IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA6_ISSET_ID, value);
  }

  public double getPara7() {
    return this.para7;
  }

  public MyParam setPara7(double para7) {
    this.para7 = para7;
    setPara7IsSet(true);
    return this;
  }

  public void unsetPara7() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARA7_ISSET_ID);
  }

  /** Returns true if field para7 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara7() {
    return EncodingUtils.testBit(__isset_bitfield, __PARA7_ISSET_ID);
  }

  public void setPara7IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARA7_ISSET_ID, value);
  }

  public String getPara8() {
    return this.para8;
  }

  public MyParam setPara8(String para8) {
    this.para8 = para8;
    return this;
  }

  public void unsetPara8() {
    this.para8 = null;
  }

  /** Returns true if field para8 is set (has been assigned a value) and false otherwise */
  public boolean isSetPara8() {
    return this.para8 != null;
  }

  public void setPara8IsSet(boolean value) {
    if (!value) {
      this.para8 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARA:
      if (value == null) {
        unsetPara();
      } else {
        setPara((String)value);
      }
      break;

    case PARA2:
      if (value == null) {
        unsetPara2();
      } else {
        setPara2((Boolean)value);
      }
      break;

    case PARA3:
      if (value == null) {
        unsetPara3();
      } else {
        setPara3((Byte)value);
      }
      break;

    case PARA4:
      if (value == null) {
        unsetPara4();
      } else {
        setPara4((Short)value);
      }
      break;

    case PARA5:
      if (value == null) {
        unsetPara5();
      } else {
        setPara5((Integer)value);
      }
      break;

    case PARA6:
      if (value == null) {
        unsetPara6();
      } else {
        setPara6((Long)value);
      }
      break;

    case PARA7:
      if (value == null) {
        unsetPara7();
      } else {
        setPara7((Double)value);
      }
      break;

    case PARA8:
      if (value == null) {
        unsetPara8();
      } else {
        setPara8((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARA:
      return getPara();

    case PARA2:
      return isPara2();

    case PARA3:
      return getPara3();

    case PARA4:
      return getPara4();

    case PARA5:
      return getPara5();

    case PARA6:
      return getPara6();

    case PARA7:
      return getPara7();

    case PARA8:
      return getPara8();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARA:
      return isSetPara();
    case PARA2:
      return isSetPara2();
    case PARA3:
      return isSetPara3();
    case PARA4:
      return isSetPara4();
    case PARA5:
      return isSetPara5();
    case PARA6:
      return isSetPara6();
    case PARA7:
      return isSetPara7();
    case PARA8:
      return isSetPara8();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MyParam)
      return this.equals((MyParam)that);
    return false;
  }

  public boolean equals(MyParam that) {
    if (that == null)
      return false;

    boolean this_present_para = true && this.isSetPara();
    boolean that_present_para = true && that.isSetPara();
    if (this_present_para || that_present_para) {
      if (!(this_present_para && that_present_para))
        return false;
      if (!this.para.equals(that.para))
        return false;
    }

    boolean this_present_para2 = true;
    boolean that_present_para2 = true;
    if (this_present_para2 || that_present_para2) {
      if (!(this_present_para2 && that_present_para2))
        return false;
      if (this.para2 != that.para2)
        return false;
    }

    boolean this_present_para3 = true;
    boolean that_present_para3 = true;
    if (this_present_para3 || that_present_para3) {
      if (!(this_present_para3 && that_present_para3))
        return false;
      if (this.para3 != that.para3)
        return false;
    }

    boolean this_present_para4 = true;
    boolean that_present_para4 = true;
    if (this_present_para4 || that_present_para4) {
      if (!(this_present_para4 && that_present_para4))
        return false;
      if (this.para4 != that.para4)
        return false;
    }

    boolean this_present_para5 = true;
    boolean that_present_para5 = true;
    if (this_present_para5 || that_present_para5) {
      if (!(this_present_para5 && that_present_para5))
        return false;
      if (this.para5 != that.para5)
        return false;
    }

    boolean this_present_para6 = true;
    boolean that_present_para6 = true;
    if (this_present_para6 || that_present_para6) {
      if (!(this_present_para6 && that_present_para6))
        return false;
      if (this.para6 != that.para6)
        return false;
    }

    boolean this_present_para7 = true;
    boolean that_present_para7 = true;
    if (this_present_para7 || that_present_para7) {
      if (!(this_present_para7 && that_present_para7))
        return false;
      if (this.para7 != that.para7)
        return false;
    }

    boolean this_present_para8 = true && this.isSetPara8();
    boolean that_present_para8 = true && that.isSetPara8();
    if (this_present_para8 || that_present_para8) {
      if (!(this_present_para8 && that_present_para8))
        return false;
      if (!this.para8.equals(that.para8))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_para = true && (isSetPara());
    list.add(present_para);
    if (present_para)
      list.add(para);

    boolean present_para2 = true;
    list.add(present_para2);
    if (present_para2)
      list.add(para2);

    boolean present_para3 = true;
    list.add(present_para3);
    if (present_para3)
      list.add(para3);

    boolean present_para4 = true;
    list.add(present_para4);
    if (present_para4)
      list.add(para4);

    boolean present_para5 = true;
    list.add(present_para5);
    if (present_para5)
      list.add(para5);

    boolean present_para6 = true;
    list.add(present_para6);
    if (present_para6)
      list.add(para6);

    boolean present_para7 = true;
    list.add(present_para7);
    if (present_para7)
      list.add(para7);

    boolean present_para8 = true && (isSetPara8());
    list.add(present_para8);
    if (present_para8)
      list.add(para8);

    return list.hashCode();
  }

  @Override
  public int compareTo(MyParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPara()).compareTo(other.isSetPara());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para, other.para);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara2()).compareTo(other.isSetPara2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para2, other.para2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara3()).compareTo(other.isSetPara3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para3, other.para3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara4()).compareTo(other.isSetPara4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para4, other.para4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara5()).compareTo(other.isSetPara5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para5, other.para5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara6()).compareTo(other.isSetPara6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para6, other.para6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara7()).compareTo(other.isSetPara7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para7, other.para7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPara8()).compareTo(other.isSetPara8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPara8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.para8, other.para8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MyParam(");
    boolean first = true;

    sb.append("para:");
    if (this.para == null) {
      sb.append("null");
    } else {
      sb.append(this.para);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("para2:");
    sb.append(this.para2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("para3:");
    sb.append(this.para3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("para4:");
    sb.append(this.para4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("para5:");
    sb.append(this.para5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("para6:");
    sb.append(this.para6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("para7:");
    sb.append(this.para7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("para8:");
    if (this.para8 == null) {
      sb.append("null");
    } else {
      sb.append(this.para8);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MyParamStandardSchemeFactory implements SchemeFactory {
    public MyParamStandardScheme getScheme() {
      return new MyParamStandardScheme();
    }
  }

  private static class MyParamStandardScheme extends StandardScheme<MyParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MyParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.para = iprot.readString();
              struct.setParaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARA2
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.para2 = iprot.readBool();
              struct.setPara2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARA3
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.para3 = iprot.readByte();
              struct.setPara3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARA4
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.para4 = iprot.readI16();
              struct.setPara4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARA5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.para5 = iprot.readI32();
              struct.setPara5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARA6
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.para6 = iprot.readI64();
              struct.setPara6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARA7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.para7 = iprot.readDouble();
              struct.setPara7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARA8
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.para8 = iprot.readString();
              struct.setPara8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MyParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.para != null) {
        oprot.writeFieldBegin(PARA_FIELD_DESC);
        oprot.writeString(struct.para);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARA2_FIELD_DESC);
      oprot.writeBool(struct.para2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARA3_FIELD_DESC);
      oprot.writeByte(struct.para3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARA4_FIELD_DESC);
      oprot.writeI16(struct.para4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARA5_FIELD_DESC);
      oprot.writeI32(struct.para5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARA6_FIELD_DESC);
      oprot.writeI64(struct.para6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARA7_FIELD_DESC);
      oprot.writeDouble(struct.para7);
      oprot.writeFieldEnd();
      if (struct.para8 != null) {
        oprot.writeFieldBegin(PARA8_FIELD_DESC);
        oprot.writeString(struct.para8);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MyParamTupleSchemeFactory implements SchemeFactory {
    public MyParamTupleScheme getScheme() {
      return new MyParamTupleScheme();
    }
  }

  private static class MyParamTupleScheme extends TupleScheme<MyParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MyParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPara()) {
        optionals.set(0);
      }
      if (struct.isSetPara2()) {
        optionals.set(1);
      }
      if (struct.isSetPara3()) {
        optionals.set(2);
      }
      if (struct.isSetPara4()) {
        optionals.set(3);
      }
      if (struct.isSetPara5()) {
        optionals.set(4);
      }
      if (struct.isSetPara6()) {
        optionals.set(5);
      }
      if (struct.isSetPara7()) {
        optionals.set(6);
      }
      if (struct.isSetPara8()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPara()) {
        oprot.writeString(struct.para);
      }
      if (struct.isSetPara2()) {
        oprot.writeBool(struct.para2);
      }
      if (struct.isSetPara3()) {
        oprot.writeByte(struct.para3);
      }
      if (struct.isSetPara4()) {
        oprot.writeI16(struct.para4);
      }
      if (struct.isSetPara5()) {
        oprot.writeI32(struct.para5);
      }
      if (struct.isSetPara6()) {
        oprot.writeI64(struct.para6);
      }
      if (struct.isSetPara7()) {
        oprot.writeDouble(struct.para7);
      }
      if (struct.isSetPara8()) {
        oprot.writeString(struct.para8);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MyParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.para = iprot.readString();
        struct.setParaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.para2 = iprot.readBool();
        struct.setPara2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.para3 = iprot.readByte();
        struct.setPara3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.para4 = iprot.readI16();
        struct.setPara4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.para5 = iprot.readI32();
        struct.setPara5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.para6 = iprot.readI64();
        struct.setPara6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.para7 = iprot.readDouble();
        struct.setPara7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.para8 = iprot.readString();
        struct.setPara8IsSet(true);
      }
    }
  }

}

